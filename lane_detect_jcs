#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import rospy
from std_msgs.msg import Int32
from sensor_msgs.msg import CompressedImage
import cv2
from cv_bridge import CvBridge
import numpy as np

class ImageProcessor:
    def __init__(self):
        rospy.init_node("lane_detect_node")
        
        rospy.Subscriber("/camera/rgb/image_raw/compressed", CompressedImage, self.cam_CB)
        self.left_pub = rospy.Publisher("left_x", Int32, queue_size=1)
        self.white_pub = rospy.Publisher("white_ratio", Int32, queue_size=1)
        self.bridge = CvBridge()
        self.img_msg = None
        self.cam_flag = False

    def cam_CB(self, msg):
        if msg is not None:
            self.img_msg = msg
            self.cam_flag = True
            self.process_image()
        else:
            self.cam_flag = False

    def process_image(self):
        np_arr = np.frombuffer(self.img_msg.data, np.uint8)
        cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        hsv_img = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
        
        yellow_lower = np.array([20, 100, 100])
        yellow_upper = np.array([30, 255, 255])
        yellow_mask = cv2.inRange(hsv_img, yellow_lower, yellow_upper)
        yellow_res = cv2.bitwise_and(cv_image, cv_image, mask=yellow_mask)
        left_x = self.calc_left_distance(yellow_res)
        
        cropped_img, _ = self.crop_img(hsv_img)
        binary_img2 = self.binary(cropped_img)
        white_ratio = self.calc_white_ratio(binary_img2)

    def calc_left_distance(self, b_image):
        b_image = self.binary(b_image)
        try:
            M = cv2.moments(b_image)
            self.x = int(M['m10'] / M['m00'])
            self.y = int(M['m01'] / M['m00'])
        except:
            self.x = 0
            self.y = 0
        self.left_pub.publish(self.x)
        return self.x

    def calc_white_ratio(self, binary_img2):
        white_pixels = np.sum(binary_img2)
        total_pixels = binary_img2.shape[0] * binary_img2.shape[1]
        white_ratio = (white_pixels / total_pixels) * 100
        white_ratio_int = int(white_ratio)
        self.white_pub.publish(white_ratio_int)
        return white_ratio

    def crop_img(self, hsv_img):
        croped_img = hsv_img[hsv_img.shape[0] * 3 // 4 : hsv_img.shape[0], hsv_img.shape[1] // 2 : hsv_img.shape[1]]
        return croped_img, croped_img.shape[0:2]

    def binary(self, croped_img):
        bin = cv2.cvtColor(croped_img, cv2.COLOR_BGR2GRAY)
        binary_img = np.zeros_like(bin)
        binary_img[bin != 0] = 1
        return binary_img

if __name__ == '__main__':
    ip = ImageProcessor()
    rospy.spin()
