#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import rospy
from std_msgs.msg import Int32
from geometry_msgs.msg import Twist

class MoveLimo:
    def __init__(self):
        rospy.init_node('control_node')
        
        self.BASE_ANGLE = 0
        self.BASE_SPEED = 0.8
        self.left_x = 0
        self.KP = 0.01
        self.white_ratio = 0

        rospy.Subscriber("/left_x", Int32, self.lane_cb)
        rospy.Subscriber("/white_ratio", Int32, self.white_ratio_cb)
        self.drive_pub = rospy.Publisher("cmd_vel", Twist, queue_size=1)
        rospy.Subscriber("obstacle_dist", Int32, self.obstacle_dist_cb)
        self.obs_dist = 100
        self.rate = rospy.Rate(20)

    def obstacle_dist_cb(self, data):
        self.obs_dist = data.data

    def white_ratio_cb(self, data):
        self.white_ratio = data.data

    def drive_control(self):
        try:
            if self.left_x == 0:
                if self.white_ratio < 30:
                    self.BASE_ANGLE = -self.KP * (self.white_ratio - 30)
                else:
                    self.BASE_ANGLE = 0
                    self.BASE_SPEED = 2.0
            else:
                self.BASE_ANGLE = self.KP * (130 - self.left_x)
                self.BASE_SPEED = 0.8

            drive = Twist()
            drive.linear.x = self.BASE_SPEED
            drive.angular.z = self.BASE_ANGLE

            if self.obs_dist < 30:
                drive.linear.x = 0
            elif self.obs_dist < 100:
                drive.linear.x = max(drive.linear.x * 0.3, 0)
            
            self.drive_pub.publish(drive)
            self.rate.sleep()
        except Exception as e:
            rospy.logerr("Error: %s", str(e))

    def lane_cb(self, data):
        self.left_x = data.data

if __name__ == '__main__':
    ml = MoveLimo()
    while not rospy.is_shutdown():
        ml.drive_control()
